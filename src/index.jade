doctype html
html
  head
    meta(charset='utf-8')
    title C64 Palette Explorer
    link(rel='stylesheet', href='css/styles.css')
    link(rel='stylesheet', href='css/collapsible.css')
    link(rel='stylesheet', href='css/image-drop.css')
  body
    h1 <strike>Retro</strike> C64 Palette Explorer v0.6.1
    p by Digger/Elysium Â© 2016-24

    .side-panel
      input#collapsible-preview.toggle(type='checkbox' checked)
      label.lbl-toggle(for='collapsible-preview' tabindex='0') Preview
      .collapsible-content
        #canvas-container
          canvas#canvas
          canvas#canvas-alt

      input#collapsible-image.toggle(type='checkbox' checked)
      label.lbl-toggle(for='collapsible-image' tabindex='0') Image conversion
      .collapsible-content
        #drop-area(
          onDragOver="FileUpload.handleDragOver(event)"
          onDragLeave="FileUpload.handleDragLeave(event)"
          onDrop="FileUpload.handleDrop(event)"
          onClick="document.getElementById('file-input').click()"
        )
          label(htmlFor="file-input") Drag and drop an image here or click to select one.
          input(
            type="file"
            id="file-input"
            accept="image/*"
            style="display:none"
            onChange="FileUpload.handleFileSelect(event)"
          )
        #image-container
          img#image-preview(alt="Image Preview", style="display:none")
          canvas#image-1
          canvas#image-2

      input#collapsible.toggle(type='checkbox')
      label.lbl-toggle(for='collapsible' tabindex='0') Palette export 
        label(for='palette') Format&nbsp;
          select#palette
            - var paletteFormats = []
            - paletteFormats.push({key: 'Timanthes',  value: 'TIMANTHES'})
            each palette in paletteFormats
              option(value=palette.value) #{palette.key}
      .collapsible-content
        textarea#output
        a#downloadlink(download='timanthes.txt' style='display: none') Download Timanthes palette

    

    label(for='sort') Sort by&nbsp;
    select#sort
      - var options = []
      - options.push({key: 'Unsorted',                  value: ''})
      - options.push({key: 'Luma',                      value: 'luma', selected: true})
      - options.push({key: 'Mix Index',                 value: 'mixIndex'})
      - options.push({key: 'Distance, Luma',            value: 'distance,luma'})
      - options.push({key: 'Luma Difference',           value: 'diffLuma'})
      - options.push({key: 'Luma Difference, Distance', value: 'diffLuma,distance'})
      - options.push({key: 'Hue',                       value: 'h'})
      - options.push({key: 'Hue, Luma',                 value: 'h,luma'})
      - options.push({key: 'Saturation',                value: 's'})
      - options.push({key: 'Luma, Saturation',          value: 'luma,s'})
      - options.push({key: 'Closest to $0',             value: 'distTo0'})
      - options.push({key: 'Closest to $1',             value: 'distTo1'})
      - options.push({key: 'Closest to $2',             value: 'distTo2'})
      - options.push({key: 'Closest to $3',             value: 'distTo3'})
      - options.push({key: 'Closest to $4',             value: 'distTo4'})
      - options.push({key: 'Closest to $5',             value: 'distTo5'})
      - options.push({key: 'Closest to $6',             value: 'distTo6'})
      - options.push({key: 'Closest to $7',             value: 'distTo7'})
      - options.push({key: 'Closest to $8',             value: 'distTo8'})
      - options.push({key: 'Closest to $9',             value: 'distTo9'})
      - options.push({key: 'Closest to $A',             value: 'distToA'})
      - options.push({key: 'Closest to $B',             value: 'distToB'})
      - options.push({key: 'Closest to $C',             value: 'distToC'})
      - options.push({key: 'Closest to $D',             value: 'distToD'})
      - options.push({key: 'Closest to $E',             value: 'distToE'})
      - options.push({key: 'Closest to $F',             value: 'distToF'})
      - options.push({key: 'Closest to R',              value: 'distToRed'})
      - options.push({key: 'Closest to G',              value: 'distToGreen'})
      - options.push({key: 'Closest to B',              value: 'distToBlue'})
      each sort in options
        option(value=sort.value, selected=sort.selected) #{sort.key}

    label(for='palette') Palette&nbsp;
    select#palette
      - var paletteTypes = []
      - paletteTypes.push({key: 'Pepto',  value: 'PEPTO'})
      - paletteTypes.push({key: 'JamPal', value: 'JAMPAL'})
      - paletteTypes.push({key: 'Agony',  value: 'AGONY'})
      - paletteTypes.push({key: 'Deekay', value: 'DEEKAY'})
      - paletteTypes.push({key: 'C64 HQ', value: 'C64_HQ'})
      each palette in paletteTypes
        option(value=palette.value) #{palette.key}

    label(for='dither') Dither&nbsp;
    select#dither
      - var ditherTypes = []
      - ditherTypes.push({key: 'mix',  value: 'noDither'})
      - ditherTypes.push({key: 'hires', value: 'hiresDither', selected: true})
      - ditherTypes.push({key: 'multi',  value: 'multiDither'})
      - ditherTypes.push({key: 'line', value: 'lineDither'})
      - ditherTypes.push({key: 'lace',  value: 'lace'})
      each dither in ditherTypes
        option(value=dither.value, selected=dither.selected) #{dither.key}

    label(for='slider') Luma Diff Threshold&nbsp;
    input#slider(type='range', min='0', max='1' step='0.01' value='1')
    input#text(type='text', value='1')

    input#exclude(type='checkbox', name='exclude')
    label(for='exclude') Hide mixed&nbsp;

    input#swap(type='checkbox', name='swap', checked='true')
    label(for='swap') Align&nbsp;

    table#table

    script(src='js/log.js')
    script(src='js/hdpi.js')
    script(src='js/palettes.js')
    script(src='js/file-saver.js')
    script(src='js/sort-utils.js')
    script(src='js/color-utils.js')
    script(src='js/process-image.js')
    script(src='js/file-upload.js')
    script(src='js/main.js')
